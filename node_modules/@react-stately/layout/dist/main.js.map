{"mappings":"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","sources":["./packages/@react-stately/layout/src/ListLayout.ts","./packages/@react-stately/layout/src/TableLayout.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, KeyboardDelegate, Node} from '@react-types/shared';\nimport {InvalidationContext, Layout, LayoutInfo, Rect, Size} from '@react-stately/virtualizer';\nimport {Key} from 'react';\n// import { DragTarget, DropTarget, DropPosition } from '@react-types/shared';\n\nexport type ListLayoutOptions<T> = {\n  /** The height of a row in px. */\n  rowHeight?: number,\n  estimatedRowHeight?: number,\n  headingHeight?: number,\n  estimatedHeadingHeight?: number,\n  padding?: number,\n  indentationForItem?: (collection: Collection<Node<T>>, key: Key) => number,\n  collator?: Intl.Collator,\n  loaderHeight?: number,\n  placeholderHeight?: number\n};\n\n// A wrapper around LayoutInfo that supports hierarchy\nexport interface LayoutNode {\n  node?: Node<unknown>,\n  layoutInfo: LayoutInfo,\n  header?: LayoutInfo,\n  children?: LayoutNode[]\n}\n\nconst DEFAULT_HEIGHT = 48;\n\n/**\n * The ListLayout class is an implementation of a collection view {@link Layout}\n * it is used for creating lists and lists with indented sub-lists.\n *\n * To configure a ListLayout, you can use the properties to define the\n * layouts and/or use the method for defining indentation.\n * The {@link ListKeyboardDelegate} extends the existing collection view\n * delegate with an additional method to do this (it uses the same delegate object as\n * the collection view itself).\n */\nexport class ListLayout<T> extends Layout<Node<T>> implements KeyboardDelegate {\n  protected rowHeight: number;\n  protected estimatedRowHeight: number;\n  protected headingHeight: number;\n  protected estimatedHeadingHeight: number;\n  protected padding: number;\n  protected indentationForItem?: (collection: Collection<Node<T>>, key: Key) => number;\n  protected layoutInfos: Map<Key, LayoutInfo>;\n  protected layoutNodes: Map<Key, LayoutNode>;\n  protected contentSize: Size;\n  collection: Collection<Node<T>>;\n  disabledKeys: Set<Key> = new Set();\n  isLoading: boolean;\n  protected lastWidth: number;\n  protected lastCollection: Collection<Node<T>>;\n  protected rootNodes: LayoutNode[];\n  protected collator: Intl.Collator;\n  protected invalidateEverything: boolean;\n  protected loaderHeight: number;\n  protected placeholderHeight: number;\n\n  /**\n   * Creates a new ListLayout with options. See the list of properties below for a description\n   * of the options that can be provided.\n   */\n  constructor(options: ListLayoutOptions<T> = {}) {\n    super();\n    this.rowHeight = options.rowHeight;\n    this.estimatedRowHeight = options.estimatedRowHeight;\n    this.headingHeight = options.headingHeight;\n    this.estimatedHeadingHeight = options.estimatedHeadingHeight;\n    this.padding = options.padding || 0;\n    this.indentationForItem = options.indentationForItem;\n    this.collator = options.collator;\n    this.loaderHeight = options.loaderHeight;\n    this.placeholderHeight = options.placeholderHeight;\n    this.layoutInfos = new Map();\n    this.layoutNodes = new Map();\n    this.rootNodes = [];\n    this.lastWidth = 0;\n    this.lastCollection = null;\n  }\n\n  getLayoutInfo(key: Key) {\n    return this.layoutInfos.get(key);\n  }\n\n  getVisibleLayoutInfos(rect: Rect) {\n    let res: LayoutInfo[] = [];\n\n    let addNodes = (nodes: LayoutNode[]) => {\n      for (let node of nodes) {\n        if (this.isVisible(node, rect)) {\n          res.push(node.layoutInfo);\n          if (node.header) {\n            res.push(node.header);\n          }\n\n          if (node.children) {\n            addNodes(node.children);\n          }\n        }\n      }\n    };\n\n    addNodes(this.rootNodes);\n    return res;\n  }\n\n  isVisible(node: LayoutNode, rect: Rect) {\n    return node.layoutInfo.rect.intersects(rect) || node.layoutInfo.isSticky;\n  }\n\n  validate(invalidationContext: InvalidationContext<Node<T>, unknown>) {\n    // Invalidate cache if the size of the collection changed.\n    // In this case, we need to recalculate the entire layout.\n    this.invalidateEverything = invalidationContext.sizeChanged;\n\n    this.collection = this.virtualizer.collection;\n    this.rootNodes = this.buildCollection();\n\n    this.lastWidth = this.virtualizer.visibleRect.width;\n    this.lastCollection = this.collection;\n  }\n\n  buildCollection(): LayoutNode[] {\n    let y = this.padding;\n    let nodes = [];\n    for (let node of this.collection) {\n      let layoutNode = this.buildChild(node, 0, y);\n      y = layoutNode.layoutInfo.rect.maxY;\n      nodes.push(layoutNode);\n    }\n\n    if (this.isLoading) {\n      let rect = new Rect(0, y, this.virtualizer.visibleRect.width,\n        this.loaderHeight ?? this.virtualizer.visibleRect.height);\n      let loader = new LayoutInfo('loader', 'loader', rect);\n      this.layoutInfos.set('loader', loader);\n      nodes.push({layoutInfo: loader});\n      y = loader.rect.maxY;\n    }\n\n    if (nodes.length === 0) {\n      let rect = new Rect(0, y, this.virtualizer.visibleRect.width,\n        this.placeholderHeight ?? this.virtualizer.visibleRect.height);\n      let placeholder = new LayoutInfo('placeholder', 'placeholder', rect);\n      this.layoutInfos.set('placeholder', placeholder);\n      nodes.push({layoutInfo: placeholder});\n      y = placeholder.rect.maxY;\n    }\n\n    this.contentSize = new Size(this.virtualizer.visibleRect.width, y + this.padding);\n    return nodes;\n  }\n\n  buildChild(node: Node<T>, x: number, y: number): LayoutNode {\n    let cached = this.layoutNodes.get(node.key);\n    if (!this.invalidateEverything && cached && cached.node === node && y === (cached.header || cached.layoutInfo).rect.y) {\n      return cached;\n    }\n\n    let layoutNode = this.buildNode(node, x, y);\n    layoutNode.node = node;\n\n    layoutNode.layoutInfo.parentKey = node.parentKey || null;\n    this.layoutInfos.set(layoutNode.layoutInfo.key, layoutNode.layoutInfo);\n    if (layoutNode.header) {\n      this.layoutInfos.set(layoutNode.header.key, layoutNode.header);\n    }\n\n    // Remove deleted child layout nodes from key mapping.\n    if (cached) {\n      let childKeys = new Set();\n      if (layoutNode.children) {\n        for (let child of layoutNode.children) {\n          childKeys.add(child.layoutInfo.key);\n        }\n      }\n\n      if (cached.children) {\n        for (let child of cached.children) {\n          if (!childKeys.has(child.layoutInfo.key)) {\n            this.removeLayoutNode(child);\n          }\n        }\n      }\n    }\n\n    this.layoutNodes.set(node.key, layoutNode);\n    return layoutNode;\n  }\n\n  removeLayoutNode(layoutNode: LayoutNode) {\n    this.layoutNodes.delete(layoutNode.layoutInfo.key);\n\n    this.layoutInfos.delete(layoutNode.layoutInfo.key);\n    if (layoutNode.header) {\n      this.layoutInfos.delete(layoutNode.header.key);\n    }\n\n    if (layoutNode.children) {\n      for (let child of layoutNode.children) {\n        if (this.layoutNodes.get(child.layoutInfo.key) === child) {\n          this.removeLayoutNode(child);\n        }\n      }\n    }\n  }\n\n  buildNode(node: Node<T>, x: number, y: number): LayoutNode {\n    switch (node.type) {\n      case 'section':\n        return this.buildSection(node, x, y);\n      case 'item':\n        return this.buildItem(node, x, y);\n    }\n  }\n\n  buildSection(node: Node<T>, x: number, y: number): LayoutNode {\n    let width = this.virtualizer.visibleRect.width;\n    let rectHeight = this.headingHeight;\n    let isEstimated = false;\n\n    // If no explicit height is available, use an estimated height.\n    if (rectHeight == null) {\n      // If a previous version of this layout info exists, reuse its height.\n      // Mark as estimated if the size of the overall collection view changed,\n      // or the content of the item changed.\n      let previousLayoutNode = this.layoutNodes.get(node.key);\n      if (previousLayoutNode && previousLayoutNode.header) {\n        let curNode = this.collection.getItem(node.key);\n        let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n        rectHeight = previousLayoutNode.header.rect.height;\n        isEstimated = width !== this.lastWidth || curNode !== lastNode || previousLayoutNode.header.estimatedSize;\n      } else {\n        rectHeight = (node.rendered ? this.estimatedHeadingHeight : 0);\n        isEstimated = true;\n      }\n    }\n\n    if (rectHeight == null) {\n      rectHeight = DEFAULT_HEIGHT;\n    }\n\n    let headerRect = new Rect(0, y, width, rectHeight);\n    let header = new LayoutInfo('header', node.key + ':header', headerRect);\n    header.estimatedSize = isEstimated;\n    header.parentKey = node.key;\n    y += header.rect.height;\n\n    let rect = new Rect(0, y, width, 0);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n\n    let startY = y;\n    let children = [];\n    for (let child of node.childNodes) {\n      let layoutNode = this.buildChild(child, x, y);\n      y = layoutNode.layoutInfo.rect.maxY;\n      children.push(layoutNode);\n    }\n\n    rect.height = y - startY;\n\n    return {\n      header,\n      layoutInfo,\n      children\n    };\n  }\n\n  buildItem(node: Node<T>, x: number, y: number): LayoutNode {\n    let width = this.virtualizer.visibleRect.width;\n    let rectHeight = this.rowHeight;\n    let isEstimated = false;\n\n    // If no explicit height is available, use an estimated height.\n    if (rectHeight == null) {\n      // If a previous version of this layout info exists, reuse its height.\n      // Mark as estimated if the size of the overall collection view changed,\n      // or the content of the item changed.\n      let previousLayoutNode = this.layoutNodes.get(node.key);\n      if (previousLayoutNode) {\n        let curNode = this.collection.getItem(node.key);\n        let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n        rectHeight = previousLayoutNode.layoutInfo.rect.height;\n        isEstimated = width !== this.lastWidth || curNode !== lastNode || previousLayoutNode.layoutInfo.estimatedSize;\n      } else {\n        rectHeight = this.estimatedRowHeight;\n        isEstimated = true;\n      }\n    }\n\n    if (rectHeight == null) {\n      rectHeight = DEFAULT_HEIGHT;\n    }\n\n    if (typeof this.indentationForItem === 'function') {\n      x += this.indentationForItem(this.collection, node.key) || 0;\n    }\n\n    let rect = new Rect(x, y, width - x, rectHeight);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n    layoutInfo.estimatedSize = isEstimated;\n    return {\n      layoutInfo\n    };\n  }\n\n  updateItemSize(key: Key, size: Size) {\n    let layoutInfo = this.layoutInfos.get(key);\n    // If no layoutInfo, item has been deleted/removed.\n    if (!layoutInfo) {\n      return false;\n    }\n\n    layoutInfo.estimatedSize = false;\n    if (layoutInfo.rect.height !== size.height) {\n      // Copy layout info rather than mutating so that later caches are invalidated.\n      let newLayoutInfo = layoutInfo.copy();\n      newLayoutInfo.rect.height = size.height;\n      this.layoutInfos.set(key, newLayoutInfo);\n\n      // Invalidate layout for this layout node and all parents\n      this.updateLayoutNode(key, layoutInfo, newLayoutInfo);\n\n      let node = this.collection.getItem(layoutInfo.parentKey);\n      while (node) {\n        this.updateLayoutNode(node.key, layoutInfo, newLayoutInfo);\n        node = this.collection.getItem(node.parentKey);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  updateLayoutNode(key: Key, oldLayoutInfo: LayoutInfo, newLayoutInfo: LayoutInfo) {\n    let n = this.layoutNodes.get(key);\n    if (n) {\n      // Invalidate by clearing node.\n      n.node = null;\n\n      // Replace layout info in LayoutNode\n      if (n.header === oldLayoutInfo) {\n        n.header = newLayoutInfo;\n      } else if (n.layoutInfo === oldLayoutInfo) {\n        n.layoutInfo = newLayoutInfo;\n      }\n    }\n  }\n\n  getContentSize() {\n    return this.contentSize;\n  }\n\n  getKeyAbove(key: Key) {\n    let collection = this.collection;\n\n    key = collection.getKeyBefore(key);\n    while (key != null) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) {\n        return key;\n      }\n\n      key = collection.getKeyBefore(key);\n    }\n  }\n\n  getKeyBelow(key: Key) {\n    let collection = this.collection;\n\n    key = collection.getKeyAfter(key);\n    while (key != null) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) {\n        return key;\n      }\n\n      key = collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyPageAbove(key: Key) {\n    let layoutInfo = this.getLayoutInfo(key);\n\n    if (layoutInfo) {\n      let pageY = Math.max(0, layoutInfo.rect.y + layoutInfo.rect.height - this.virtualizer.visibleRect.height);\n      while (layoutInfo && layoutInfo.rect.y > pageY) {\n        let keyAbove = this.getKeyAbove(layoutInfo.key);\n        layoutInfo = this.getLayoutInfo(keyAbove);\n      }\n\n      if (layoutInfo) {\n        return layoutInfo.key;\n      }\n    }\n\n    return this.getFirstKey();\n  }\n\n  getKeyPageBelow(key: Key) {\n    let layoutInfo = this.getLayoutInfo(key != null ? key : this.getFirstKey());\n\n    if (layoutInfo) {\n      let pageY = Math.min(this.virtualizer.contentSize.height, layoutInfo.rect.y - layoutInfo.rect.height + this.virtualizer.visibleRect.height);\n      while (layoutInfo && layoutInfo.rect.y < pageY) {\n        let keyBelow = this.getKeyBelow(layoutInfo.key);\n        layoutInfo = this.getLayoutInfo(keyBelow);\n      }\n\n      if (layoutInfo) {\n        return layoutInfo.key;\n      }\n    }\n\n    return this.getLastKey();\n  }\n\n  getFirstKey() {\n    let collection = this.collection;\n    let key = collection.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) {\n        return key;\n      }\n\n      key = collection.getKeyAfter(key);\n    }\n  }\n\n  getLastKey() {\n    let collection = this.collection;\n    let key = collection.getLastKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) {\n        return key;\n      }\n\n      key = collection.getKeyBefore(key);\n    }\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) {\n        return key;\n      }\n\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n\n  // getDragTarget(point: Point): DragTarget {\n  //   let visible = this.getVisibleLayoutInfos(new Rect(point.x, point.y, 1, 1));\n  //   if (visible.length > 0) {\n  //     visible = visible.sort((a, b) => b.zIndex - a.zIndex);\n  //     return {\n  //       type: 'item',\n  //       key: visible[0].key\n  //     };\n  //   }\n\n  //   return null;\n  // }\n\n  // getDropTarget(point: Point): DropTarget {\n  //   let key = this.virtualizer.keyAtPoint(point);\n  //   if (key) {\n  //     return {\n  //       type: 'item',\n  //       key,\n  //       dropPosition: DropPosition.ON\n  //     };\n  //   }\n\n  //   return null;\n  // }\n\n  getInitialLayoutInfo(layoutInfo: LayoutInfo) {\n    layoutInfo.opacity = 0;\n    layoutInfo.transform = 'scale3d(0.8, 0.8, 0.8)';\n    return layoutInfo;\n  }\n\n  getFinalLayoutInfo(layoutInfo: LayoutInfo) {\n    layoutInfo.opacity = 0;\n    layoutInfo.transform = 'scale3d(0.8, 0.8, 0.8)';\n    return layoutInfo;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ColumnProps, TableCollection} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from 'react';\nimport {LayoutInfo, Point, Rect, Size} from '@react-stately/virtualizer';\nimport {LayoutNode, ListLayout, ListLayoutOptions} from './ListLayout';\n\n\ntype TableLayoutOptions<T> = ListLayoutOptions<T> & {\n  getDefaultWidth: (props) => string | number\n}\n\nexport class TableLayout<T> extends ListLayout<T> {\n  collection: TableCollection<T>;\n  lastCollection: TableCollection<T>;\n  columnWidths: Map<Key, number>;\n  stickyColumnIndices: number[];\n  getDefaultWidth: (props) => string | number;\n  wasLoading = false;\n  isLoading = false;\n\n  constructor(options: TableLayoutOptions<T>) {\n    super(options);\n    this.getDefaultWidth = options.getDefaultWidth;\n  }\n\n\n  buildCollection(): LayoutNode[] {\n    // If columns changed, clear layout cache.\n    if (\n      !this.lastCollection ||\n      this.collection.columns.length !== this.lastCollection.columns.length ||\n      this.collection.columns.some((c, i) => c.key !== this.lastCollection.columns[i].key)\n    ) {\n      // Invalidate everything in this layout pass. Will be reset in ListLayout on the next pass.\n      this.invalidateEverything = true;\n    }\n\n    // Track whether we were previously loading. This is used to adjust the animations of async loading vs inserts.\n    let loadingState = this.collection.body.props.loadingState;\n    this.wasLoading = this.isLoading;\n    this.isLoading = loadingState === 'loading' || loadingState === 'loadingMore';\n\n    this.buildColumnWidths();\n    let header = this.buildHeader();\n    let body = this.buildBody(0);\n    body.layoutInfo.rect.width = Math.max(header.layoutInfo.rect.width, body.layoutInfo.rect.width);\n    this.contentSize = new Size(body.layoutInfo.rect.width, body.layoutInfo.rect.maxY);\n    return [\n      header,\n      body\n    ];\n  }\n\n  buildColumnWidths() {\n    this.columnWidths = new Map();\n    this.stickyColumnIndices = [];\n\n    // Pass 1: set widths for all explicitly defined columns.\n    let remainingColumns = new Set<GridNode<T>>();\n    let remainingSpace = this.virtualizer.visibleRect.width;\n    for (let column of this.collection.columns) {\n      let props = column.props as ColumnProps<T>;\n      let width = props.width ?? this.getDefaultWidth(props);\n      if (width != null) {\n        let w = this.parseWidth(width);\n        this.columnWidths.set(column.key, w);\n        remainingSpace -= w;\n      } else {\n        remainingColumns.add(column);\n      }\n\n      // The selection cell and any other sticky columns always need to be visible.\n      // In addition, row headers need to be in the DOM for accessibility labeling.\n      if (column.props.isSelectionCell || this.collection.rowHeaderColumnKeys.has(column.key)) {\n        this.stickyColumnIndices.push(column.index);\n      }\n    }\n\n    // Pass 2: if there are remaining columns, then distribute the remaining space evenly.\n    if (remainingColumns.size > 0) {\n      let columnWidth = remainingSpace / (this.collection.columns.length - this.columnWidths.size);\n\n      for (let column of remainingColumns) {\n        let props = column.props as ColumnProps<T>;\n        let minWidth = props.minWidth != null ? this.parseWidth(props.minWidth) : 75;\n        let maxWidth = props.maxWidth != null ? this.parseWidth(props.maxWidth) : Infinity;\n        let width = Math.max(minWidth, Math.min(maxWidth, columnWidth));\n\n        this.columnWidths.set(column.key, width);\n        remainingSpace -= width;\n        if (width !== columnWidth) {\n          columnWidth = remainingSpace / (this.collection.columns.length - this.columnWidths.size);\n        }\n      }\n    }\n  }\n\n  parseWidth(width: number | string): number {\n    if (typeof width === 'string') {\n      let match = width.match(/^(\\d+)%$/);\n      if (!match) {\n        throw new Error('Only percentages are supported as column widths');\n      }\n\n      return this.virtualizer.visibleRect.width * (parseInt(match[1], 10) / 100);\n    }\n\n    return width;\n  }\n\n  buildHeader(): LayoutNode {\n    let rect = new Rect(0, 0, 0, 0);\n    let layoutInfo = new LayoutInfo('header', 'header', rect);\n\n    let y = 0;\n    let width = 0;\n    let children: LayoutNode[] = [];\n    for (let headerRow of this.collection.headerRows) {\n      let layoutNode = this.buildChild(headerRow, 0, y);\n      layoutNode.layoutInfo.parentKey = 'header';\n      y = layoutNode.layoutInfo.rect.maxY;\n      width = Math.max(width, layoutNode.layoutInfo.rect.width);\n      children.push(layoutNode);\n    }\n\n    rect.width = width;\n    rect.height = y;\n\n    this.layoutInfos.set('header', layoutInfo);\n\n    return {\n      layoutInfo,\n      children\n    };\n  }\n\n  buildHeaderRow(headerRow: GridNode<T>, x: number, y: number) {\n    let rect = new Rect(0, y, 0, 0);\n    let row = new LayoutInfo('headerrow', headerRow.key, rect);\n\n    let height = 0;\n    let columns: LayoutNode[] = [];\n    for (let cell of headerRow.childNodes) {\n      let layoutNode = this.buildChild(cell, x, y);\n      layoutNode.layoutInfo.parentKey = row.key;\n      x = layoutNode.layoutInfo.rect.maxX;\n      height = Math.max(height, layoutNode.layoutInfo.rect.height);\n      columns.push(layoutNode);\n    }\n\n    this.setChildHeights(columns, height);\n\n    rect.height = height;\n    rect.width = x;\n\n    return {\n      layoutInfo: row,\n      children: columns\n    };\n  }\n\n  setChildHeights(children: LayoutNode[], height: number) {\n    for (let child of children) {\n      if (child.layoutInfo.rect.height !== height) {\n        // Need to copy the layout info before we mutate it.\n        child.layoutInfo = child.layoutInfo.copy();\n        this.layoutInfos.set(child.layoutInfo.key, child.layoutInfo);\n\n        child.layoutInfo.rect.height = height;\n      }\n    }\n  }\n\n  getColumnWidth(node: GridNode<T>) {\n    let colspan = node.colspan ?? 1;\n    let width = 0;\n    for (let i = 0; i < colspan; i++) {\n      let column = this.collection.columns[node.index + i];\n      width += this.columnWidths.get(column.key);\n    }\n\n    return width;\n  }\n\n  getEstimatedHeight(node: GridNode<T>, width: number, height: number, estimatedHeight: number) {\n    let isEstimated = false;\n\n    // If no explicit height is available, use an estimated height.\n    if (height == null) {\n      // If a previous version of this layout info exists, reuse its height.\n      // Mark as estimated if the size of the overall collection view changed,\n      // or the content of the item changed.\n      let previousLayoutNode = this.layoutNodes.get(node.key);\n      if (previousLayoutNode) {\n        let curNode = this.collection.getItem(node.key);\n        let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n        height = previousLayoutNode.layoutInfo.rect.height;\n        isEstimated = curNode !== lastNode || width !== previousLayoutNode.layoutInfo.rect.width || previousLayoutNode.layoutInfo.estimatedSize;\n      } else {\n        height = estimatedHeight;\n        isEstimated = true;\n      }\n    }\n\n    return {height, isEstimated};\n  }\n\n  buildColumn(node: GridNode<T>, x: number, y: number): LayoutNode {\n    let width = this.getColumnWidth(node);\n    let {height, isEstimated} = this.getEstimatedHeight(node, width, this.headingHeight, this.estimatedHeadingHeight);\n    let rect = new Rect(x, y, width, height);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n    layoutInfo.isSticky = node.props?.isSelectionCell;\n    layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n    layoutInfo.estimatedSize = isEstimated;\n\n    return {\n      layoutInfo\n    };\n  }\n\n  buildBody(y: number): LayoutNode {\n    let rect = new Rect(0, y, 0, 0);\n    let layoutInfo = new LayoutInfo('rowgroup', 'body', rect);\n\n    let startY = y;\n    let width = 0;\n    let children: LayoutNode[] = [];\n    for (let node of this.collection.body.childNodes) {\n      let layoutNode = this.buildChild(node, 0, y);\n      layoutNode.layoutInfo.parentKey = 'body';\n      y = layoutNode.layoutInfo.rect.maxY;\n      width = Math.max(width, layoutNode.layoutInfo.rect.width);\n      children.push(layoutNode);\n    }\n\n    if (this.isLoading) {\n      let rect = new Rect(0, y, width || this.virtualizer.visibleRect.width, children.length === 0 ? this.virtualizer.visibleRect.height : 60);\n      let loader = new LayoutInfo('loader', 'loader', rect);\n      loader.parentKey = 'body';\n      loader.isSticky = children.length === 0;\n      this.layoutInfos.set('loader', loader);\n      children.push({layoutInfo: loader});\n      y = loader.rect.maxY;\n      width = Math.max(width, rect.width);\n    } else if (children.length === 0) {\n      let rect = new Rect(0, y, this.virtualizer.visibleRect.width, this.virtualizer.visibleRect.height);\n      let empty = new LayoutInfo('empty', 'empty', rect);\n      empty.parentKey = 'body';\n      empty.isSticky = true;\n      this.layoutInfos.set('empty', empty);\n      children.push({layoutInfo: empty});\n      y = empty.rect.maxY;\n      width = Math.max(width, rect.width);\n    }\n\n    rect.width = width;\n    rect.height = y - startY;\n\n    this.layoutInfos.set('body', layoutInfo);\n\n    return {\n      layoutInfo,\n      children\n    };\n  }\n\n  buildNode(node: GridNode<T>, x: number, y: number): LayoutNode {\n    switch (node.type) {\n      case 'headerrow':\n        return this.buildHeaderRow(node, x, y);\n      case 'item':\n        return this.buildRow(node, x, y);\n      case 'column':\n      case 'placeholder':\n        return this.buildColumn(node, x, y);\n      case 'cell':\n        return this.buildCell(node, x, y);\n      default:\n        throw new Error('Unknown node type ' + node.type);\n    }\n  }\n\n  buildRow(node: GridNode<T>, x: number, y: number): LayoutNode {\n    let rect = new Rect(x, y, 0, 0);\n    let layoutInfo = new LayoutInfo('row', node.key, rect);\n\n    let children: LayoutNode[] = [];\n    let height = 0;\n    for (let child of node.childNodes) {\n      let layoutNode = this.buildChild(child, x, y);\n      x = layoutNode.layoutInfo.rect.maxX;\n      height = Math.max(height, layoutNode.layoutInfo.rect.height);\n      children.push(layoutNode);\n    }\n\n    this.setChildHeights(children, height);\n\n    rect.width = x;\n    rect.height = height + 1; // +1 for bottom border\n\n    return {\n      layoutInfo,\n      children\n    };\n  }\n\n  buildCell(node: GridNode<T>, x: number, y: number): LayoutNode {\n    let width = this.getColumnWidth(node);\n    let {height, isEstimated} = this.getEstimatedHeight(node, width, this.rowHeight, this.estimatedRowHeight);\n    let rect = new Rect(x, y, width, height);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n    layoutInfo.isSticky = node.props?.isSelectionCell;\n    layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n    layoutInfo.estimatedSize = isEstimated;\n\n    return {\n      layoutInfo\n    };\n  }\n\n  getVisibleLayoutInfos(rect: Rect) {\n    let res: LayoutInfo[] = [];\n\n    for (let node of this.rootNodes) {\n      res.push(node.layoutInfo);\n      this.addVisibleLayoutInfos(res, node, rect);\n    }\n\n    return res;\n  }\n\n  addVisibleLayoutInfos(res: LayoutInfo[], node: LayoutNode, rect: Rect) {\n    if (!node.children || node.children.length === 0) {\n      return;\n    }\n\n    switch (node.layoutInfo.type) {\n      case 'header': {\n        for (let child of node.children) {\n          res.push(child.layoutInfo);\n          this.addVisibleLayoutInfos(res, child, rect);\n        }\n        break;\n      }\n      case 'rowgroup': {\n        let firstVisibleRow = this.binarySearch(node.children, rect.topLeft, 'y');\n        let lastVisibleRow = this.binarySearch(node.children, rect.bottomRight, 'y');\n        for (let i = firstVisibleRow; i <= lastVisibleRow; i++) {\n          res.push(node.children[i].layoutInfo);\n          this.addVisibleLayoutInfos(res, node.children[i], rect);\n        }\n        break;\n      }\n      case 'headerrow':\n      case 'row': {\n        let firstVisibleCell = this.binarySearch(node.children, rect.topLeft, 'x');\n        let lastVisibleCell = this.binarySearch(node.children, rect.topRight, 'x');\n        let stickyIndex = 0;\n        for (let i = firstVisibleCell; i <= lastVisibleCell; i++) {\n          // Sticky columns and row headers are always in the DOM. Interleave these\n          // with the visible range so that they are in the right order.\n          if (stickyIndex < this.stickyColumnIndices.length) {\n            let idx = this.stickyColumnIndices[stickyIndex];\n            while (idx < i) {\n              res.push(node.children[idx].layoutInfo);\n              idx = this.stickyColumnIndices[stickyIndex++];\n            }\n          }\n\n          res.push(node.children[i].layoutInfo);\n        }\n\n        while (stickyIndex < this.stickyColumnIndices.length) {\n          let idx = this.stickyColumnIndices[stickyIndex++];\n          res.push(node.children[idx].layoutInfo);\n        }\n        break;\n      }\n      default:\n        throw new Error('Unknown node type ' + node.layoutInfo.type);\n    }\n  }\n\n  binarySearch(items: LayoutNode[], point: Point, axis: 'x' | 'y') {\n    let low = 0;\n    let high = items.length - 1;\n    while (low <= high) {\n      let mid = (low + high) >> 1;\n      let item = items[mid];\n\n      if ((axis === 'x' && item.layoutInfo.rect.maxX < point.x) || (axis === 'y' && item.layoutInfo.rect.maxY < point.y)) {\n        low = mid + 1;\n      } else if ((axis === 'x' && item.layoutInfo.rect.x > point.x) || (axis === 'y' && item.layoutInfo.rect.y > point.y)) {\n        high = mid - 1;\n      } else {\n        return mid;\n      }\n    }\n\n    return Math.max(0, Math.min(items.length - 1, low));\n  }\n\n  getInitialLayoutInfo(layoutInfo: LayoutInfo) {\n    let res = super.getInitialLayoutInfo(layoutInfo);\n\n    // If this insert was the result of async loading, remove the zoom effect and just keep the fade in.\n    if (this.wasLoading) {\n      res.transform = null;\n    }\n\n    return res;\n  }\n}\n"],"names":["DEFAULT_HEIGHT","ListLayout","Layout","constructor","options","rowHeight","estimatedRowHeight","headingHeight","estimatedHeadingHeight","padding","indentationForItem","layoutInfos","layoutNodes","contentSize","collection","disabledKeys","Set","isLoading","lastWidth","lastCollection","rootNodes","collator","invalidateEverything","loaderHeight","placeholderHeight","Map","getLayoutInfo","key","get","getVisibleLayoutInfos","rect","res","addNodes","nodes","node","isVisible","push","layoutInfo","header","children","intersects","isSticky","validate","invalidationContext","sizeChanged","virtualizer","buildCollection","visibleRect","width","y","layoutNode","buildChild","maxY","Rect","height","loader","LayoutInfo","set","length","placeholder","Size","x","cached","buildNode","parentKey","childKeys","child","add","has","removeLayoutNode","delete","type","buildSection","buildItem","rectHeight","isEstimated","previousLayoutNode","curNode","getItem","lastNode","estimatedSize","rendered","headerRect","startY","childNodes","updateItemSize","size","newLayoutInfo","copy","updateLayoutNode","oldLayoutInfo","n","getContentSize","getKeyAbove","getKeyBefore","item","getKeyBelow","getKeyAfter","getKeyPageAbove","pageY","Math","max","keyAbove","getFirstKey","getKeyPageBelow","min","keyBelow","getLastKey","getKeyForSearch","search","fromKey","substring","textValue","slice","compare","getInitialLayoutInfo","opacity","transform","getFinalLayoutInfo","TableLayout","columnWidths","stickyColumnIndices","getDefaultWidth","wasLoading","columns","some","c","i","loadingState","body","props","buildColumnWidths","buildHeader","buildBody","remainingColumns","remainingSpace","column","w","parseWidth","isSelectionCell","rowHeaderColumnKeys","index","columnWidth","minWidth","maxWidth","Infinity","match","Error","parseInt","headerRow","headerRows","buildHeaderRow","row","cell","maxX","setChildHeights","getColumnWidth","colspan","getEstimatedHeight","estimatedHeight","buildColumn","zIndex","empty","buildRow","buildCell","addVisibleLayoutInfos","firstVisibleRow","binarySearch","topLeft","lastVisibleRow","bottomRight","firstVisibleCell","lastVisibleCell","topRight","stickyIndex","idx","items","point","axis","low","high","mid"],"version":3,"file":"main.js.map"}